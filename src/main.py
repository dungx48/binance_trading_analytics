from service.fetch_kline_daily_service.consumer_service import ConsumeKlinesDailyService    
from service.fetch_kline_daily_service.producer_service import BinanceKlinesProducerService
import logging
import schedule
import time
import threading
from utils.logging_config import setup_logging
from constant.app_constant import MODE_RUN_JOB, AppConst

# ‚úÖ G·ªçi logging setup ngay t·ª´ entry point
setup_logging(prefix="klines_job", level=logging.INFO)

# ‚úÖ Logger chu·∫©n theo module
logger = logging.getLogger(__name__)

def job():
    logging.info("üöÄ [Job] B·∫Øt ƒë·∫ßu producer + consumer song song")

    # Thread A: Producer ch·∫°y ngay
    def _producer():
        try:
            logging.info("üïñ [Producer] Start")
            producer = BinanceKlinesProducerService()
            producer.run_daily_producer(mode=MODE_RUN_JOB.DAILY)
            logging.info("‚úÖ [Producer] Done")
        except Exception as e:
            logging.error(f"‚ùå [Producer] L·ªói: {e}")

    t_prod = threading.Thread(target=_producer, daemon=True)
    t_prod.start()

    # Thread B: Consumer ƒë·ª£i 2 ph√∫t r·ªìi ch·∫°y
    def _consumer_delayed():
        time.sleep(120)
        try:
            logging.info("üöö [Consumer] Start sau 2 ph√∫t")
            ConsumeKlinesDailyService().consume_and_push_to_db()
            logging.info("‚úÖ [Consumer] Done")
        except Exception as e:
            logging.error(f"‚ùå [Consumer] L·ªói: {e}")

    t_cons = threading.Thread(target=_consumer_delayed, daemon=True)
    t_cons.start()

if __name__ == "__main__":
    # L√™n l·ªãch ch·∫°y job m·ªói ng√†y l√∫c 07:00
    schedule.every().day.at(AppConst.SEVEN_AM).do(job)
    logging.info(f"üìÜ Scheduler kh·ªüi t·∫°o ‚Äì ch·ªù job l√∫c {AppConst.SEVEN_AM} h·∫±ng ng√†y")

    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("‚õî Scheduler ƒë√£ d·ª´ng (KeyboardInterrupt)")